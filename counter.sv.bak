
		 //Xuanchang Hu
//03/13/2023
//EE 371
//Lab6 task1


//counter can keep tracking the numbers of cars in the parking lot.
//It takes clk and reset as input. inc and dec as input when cars enter ot exit the 
//parking lot. And it returns num as number of cars, tens as tens digit of number, 
//units as units digit of number
module counter(clk, reset, inc, dec, num, tens, units);
   input logic clk, reset, inc, dec;
   
   output logic [1:0] num;
   output logic [1:0] tens, units;
   
   
   
   // If reset, num, tens and units are 0,
	// If number is smaller than 25, and if increase. Number increases by 1. if units 
	// is smaller than 9, 
	// units increases by one. if units is 0, tens increases by 1, units changes to 0.
	// if decrease, Number decreases by 1. if units is greater than 0, 
	// units decreases by one. if units is 0, tens decreases by 1, units changes to 9.
   always_ff @(posedge clk) begin
      if (reset) begin
         num <= 0;
         tens <= 0;
         units <= 0;
      end 
    
    
    else if (num <= 3) begin
       if (inc) begin
        num <= num + 1;
      
      if (units < 9)  begin// if units < 9, units increases
            units <= units + 1;
       end    
		 else begin          // if units = 9, units changes to 0, tens increases
          tens <= tens + 1;
            units <= 0;
			end	
     end   
        
     
    
     else if (dec) begin
        num <= num - 1;
        if (tens > 0) begin
           if (units > 0) begin // if units > 0, units decreases
              units <= units - 1;
           end else begin       // if units = 0, units changes to 9, tens decreases
              units <= 9;
              tens <= tens - 1;
			  end	  
        end 
		else 
          units <= units - 1;
    end
   end
    
    
    
   end

endmodule

// counter_testbench tested all the cases including increase and decrease, it tests 
// the number of cars from 0 to 25
module counter_testbench();
   logic clk, reset, inc, dec;
	
	logic [1:0] num;
	logic [1:0] tens, units;
	
	counter dut(.clk, .reset, .inc, .dec, .num, .tens, .units);
	
	//clock setup
	  parameter clock_period = 100;
	  
	  initial begin
	     clk <= 0;
		  forever #(clock_period / 2) clk <= ~clk;
	  end
	  
	  integer i; 
	  initial begin
	     reset <= 1;	inc <= 0; dec <= 0; @(posedge clk);
		  reset <= 0;	                    @(posedge clk);
		  for(i=0; i<3; i++) begin                       //increase by 20
			  inc <= 1;	                    @(posedge clk);
		     inc <= 0;                      @(posedge clk);
		  end
		  @(posedge clk);
		  @(posedge clk);
		  @(posedge clk);
		  for(i=0; i<3; i++) begin                       //decrease by 20
			  dec <= 1;	                    @(posedge clk);
		     dec <= 0;                      @(posedge clk);
		  end
		  @(posedge clk);
		  @(posedge clk);
		  
		  $stop;
		end
endmodule 